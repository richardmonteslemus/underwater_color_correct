% % Simulate known values
% rho = 0.2;            % reflectance (20%)
% E0 = 1;               % surface light (arbitrary units)
% Kd_true = 0.3;        % true attenuation coefficient (1/m)
% depths = [1, 2, 3];   % depths in meters
% 
% % Simulate observed intensity at each depth
% I = rho * E0 * exp(-Kd_true * depths); % This is what a sensor would measure
% 
% %%lests tart
% % Try to estimate Kd from (depth, I) pairs
% % Take log to linearize:
% % log(I) = log(rho * E0) - Kd * d
% but 
% logI = log(I);
% p = polyfit(depths, logI, 1);  % Linear fit: slope = -Kd
% 
% Kd_est = -p(1);  % recovered attenuation
%                  % Remember og Kd has a negative in front of it in the
%                  % equation
% 
% fprintf('True Kd = %.3f, Estimated Kd = %.3f\n', Kd_true, Kd_est); 
% 
% %%

clear; clc; close all;

%% 1. Define wavelength range
lambda = (400:10:700)'; % nm
nLambda = length(lambda);

%% 2. Load reflectance spectrum (rho)
Refl_spectra_DGK = importdata('test/DGKcolorchart_reflectances.csv'); % Reflectance values of DGK color charts provided by Derya 
gray_patch_cols = 3:7;  % columns for gray1 to black
rho_patches = Refl_spectra_DGK.data(:, gray_patch_cols);  % size: nLambda x nPatches
nPatches = size(rho_patches, 2); % returns 5 which corresponds to the 5 columns of patches gray 1 - black
%%
% Plot reflectance
figure;
plot(lambda, rho_patches, 'k-', 'LineWidth', 2);
xlabel('Wavelength (nm)'); ylabel('Reflectance');
title('Reflectance Spectrum (Gray Patches)');
grid on;

%% 3. Load and interpolate D65 daylight spectrum
light_D65 = importdata('test/illuminant-D65.csv'); %Daylight spectrum at around noon, often considered the average daylight spectrum
E0 = interp1(light_D65.data(:,1), light_D65.data(:,2), lambda, 'linear', 'extrap');

% Plot D65 spectrum
figure;
plot(lambda, E0, 'b-', 'LineWidth', 2);
xlabel('Wavelength (nm)'); ylabel('Relative Intensity');
title('Interpolated Daylight Spectrum (D65)');
grid on;

%% 4. Load camera spectral response (Canon 5D IV)
SRGB = readtable('Canon-EOS-5D-Mark-IV.csv'); 
SR = SRGB.red;
SG = SRGB.green;
SB = SRGB.blue;

% Plot camera response
figure;
plot(lambda, SR, 'r-', lambda, SG, 'g-', lambda, SB, 'b-', 'LineWidth', 2);
xlabel('Wavelength (nm)'); ylabel('Relative Sensitivity');
title('Camera Spectral Response (Canon 5D IV)');
legend('Red','Green','Blue'); grid on;

%% 5. Simulate RGB values at multiple depths using true Kd
Jerlov_Kd = importdata('test/Jerlov_Kd.csv'); % true Kd to simulate
Kd_true = Jerlov_Kd(:,2);
depths = [1, 2, 5, 7, 10]; % meters
nDepths = length(depths);
%%
RGB = zeros(nDepths * nPatches, 3);
depths_all = zeros(nDepths * nPatches, 1);
Rho_all = zeros(nDepths * nPatches, nLambda);
delta_lambda = lambda(2) - lambda(1);  % wavelength interval in nm (assumes uniform spacing) 

row = 1;
for p = 1:nPatches
    rho = rho_patches(:,p);

    for i = 1:nDepths
        d = depths(i);
        attenuation = exp(-Kd_true .* d);
        L = rho .* E0 .* attenuation;

        RGB(row,1) = sum(SR .* L) * delta_lambda;  % R Rieman Sum for in
        RGB(row,2) = sum(SG .* L) * delta_lambda;  % G
        RGB(row,3) = sum(SB .* L) * delta_lambda;  % B

        depths_all(row) = d;
        Rho_all(row,:) = rho';  % store reflectance as a row

        row = row + 1;
    end
end

patch_labels = ["gray1", "gray2", "gray3", "gray4", "black"];
labels = strings(nDepths * nPatches, 1);

row = 1;
for p = 1:nPatches
    patch_name = patch_labels(p);
    for i = 1:nDepths
        labels(row) = sprintf("%s_D%d", patch_name, depths(i));
        row = row + 1;
    end
end


T = array2table(RGB, 'VariableNames', {'R','G','B'}, 'RowNames', labels);
disp(T);

figure;
bar(RGB);
legend('R','G','B');
title('Simulated RGBs for all patches and depths');
xlabel('Sample Index');
ylabel('RGB Intensity');



%% 6. Estimate Kd using optimization (from RGBs)

costFun = @(Kd) kd_rgb_cost(Kd, RGB, depths_all, Rho_all, E0, SR, SG, SB, lambda);
Kd0 = 0.3 + 0.2 * randn(nLambda,1);
options = optimset('Display', 'iter', 'MaxFunEvals', 5000, 'MaxIter', 1000);
Kd_est = fminsearch(costFun, Kd0, options);


%% 7. Plot result
figure;
plot(lambda, Kd_true, 'k-', 'LineWidth', 2); hold on;
plot(lambda, Kd_est, 'r--', 'LineWidth', 2);
xlabel('Wavelength (nm)'); ylabel('Kd(\lambda) [1/m]');
legend('True Kd', 'Estimated Kd');
title('Estimated vs True Kd(\lambda)');
grid on;
